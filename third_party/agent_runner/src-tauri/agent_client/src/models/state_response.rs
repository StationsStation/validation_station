/*
 * State API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StateResponse {
    /// Mapping from ledger → exchange → list of assets
    #[serde(rename = "portfolio", skip_serializing_if = "Option::is_none")]
    pub portfolio: Option<std::collections::HashMap<String, std::collections::HashMap<String, Vec<models::Asset>>>>,
    /// Mapping from ledger → exchange → list of prices
    #[serde(rename = "prices", skip_serializing_if = "Option::is_none")]
    pub prices: Option<std::collections::HashMap<String, std::collections::HashMap<String, Vec<models::Price>>>>,
    #[serde(rename = "new_orders", skip_serializing_if = "Option::is_none")]
    pub new_orders: Option<Vec<serde_json::Value>>,
    #[serde(rename = "open_orders", skip_serializing_if = "Option::is_none")]
    pub open_orders: Option<Vec<models::Order>>,
    #[serde(rename = "failed_orders", skip_serializing_if = "Option::is_none")]
    pub failed_orders: Option<Vec<serde_json::Value>>,
    #[serde(rename = "submitted_orders", skip_serializing_if = "Option::is_none")]
    pub submitted_orders: Option<Vec<serde_json::Value>>,
    #[serde(rename = "unaffordable_opportunity", skip_serializing_if = "Option::is_none")]
    pub unaffordable_opportunity: Option<Vec<serde_json::Value>>,
    #[serde(rename = "total_open_orders", skip_serializing_if = "Option::is_none")]
    pub total_open_orders: Option<i32>,
    #[serde(rename = "time_since_last_update", skip_serializing_if = "Option::is_none")]
    pub time_since_last_update: Option<String>,
    #[serde(rename = "current_state", skip_serializing_if = "Option::is_none")]
    pub current_state: Option<String>,
    #[serde(rename = "current_period", skip_serializing_if = "Option::is_none")]
    pub current_period: Option<i32>,
    #[serde(rename = "is_healthy", skip_serializing_if = "Option::is_none")]
    pub is_healthy: Option<bool>,
}

impl StateResponse {
    pub fn new() -> StateResponse {
        StateResponse {
            portfolio: None,
            prices: None,
            new_orders: None,
            open_orders: None,
            failed_orders: None,
            submitted_orders: None,
            unaffordable_opportunity: None,
            total_open_orders: None,
            time_since_last_update: None,
            current_state: None,
            current_period: None,
            is_healthy: None,
        }
    }
}

