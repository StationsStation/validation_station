/*
 * State API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Asset {
    #[serde(rename = "asset_id", skip_serializing_if = "Option::is_none")]
    pub asset_id: Option<String>,
    #[serde(rename = "free", skip_serializing_if = "Option::is_none")]
    pub free: Option<f64>,
    #[serde(rename = "used", skip_serializing_if = "Option::is_none")]
    pub used: Option<f64>,
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<f64>,
    #[serde(rename = "is_native", skip_serializing_if = "Option::is_none")]
    pub is_native: Option<bool>,
    #[serde(rename = "contract_address", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub contract_address: Option<Option<String>>,
}

impl Asset {
    pub fn new() -> Asset {
        Asset {
            asset_id: None,
            free: None,
            used: None,
            total: None,
            is_native: None,
            contract_address: None,
        }
    }
}

