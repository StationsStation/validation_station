/*
 * State API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Order {
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<i32>,
    #[serde(rename = "side", skip_serializing_if = "Option::is_none")]
    pub side: Option<i32>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<i32>,
    #[serde(rename = "price", skip_serializing_if = "Option::is_none")]
    pub price: Option<f64>,
    #[serde(rename = "exchange_id", skip_serializing_if = "Option::is_none")]
    pub exchange_id: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "client_order_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_order_id: Option<Option<String>>,
    #[serde(rename = "info", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub info: Option<Option<serde_json::Value>>,
    #[serde(rename = "ledger_id", skip_serializing_if = "Option::is_none")]
    pub ledger_id: Option<String>,
    #[serde(rename = "asset_a", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub asset_a: Option<Option<String>>,
    #[serde(rename = "asset_b", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub asset_b: Option<Option<String>>,
    #[serde(rename = "timestamp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Option<String>>,
    #[serde(rename = "datetime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub datetime: Option<Option<String>>,
    #[serde(rename = "time_in_force", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub time_in_force: Option<Option<String>>,
    #[serde(rename = "post_only", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub post_only: Option<Option<bool>>,
    #[serde(rename = "last_trade_timestamp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_trade_timestamp: Option<Option<String>>,
    #[serde(rename = "stop_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stop_price: Option<Option<f64>>,
    #[serde(rename = "trigger_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub trigger_price: Option<Option<f64>>,
    #[serde(rename = "cost", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cost: Option<Option<f64>>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<f64>,
    #[serde(rename = "filled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub filled: Option<Option<f64>>,
    #[serde(rename = "remaining", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub remaining: Option<Option<f64>>,
    #[serde(rename = "fee", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fee: Option<Option<f64>>,
    #[serde(rename = "average", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub average: Option<Option<f64>>,
    #[serde(rename = "trades", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub trades: Option<Option<Vec<serde_json::Value>>>,
    #[serde(rename = "fees", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub fees: Option<Option<Vec<serde_json::Value>>>,
    #[serde(rename = "last_update_timestamp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_update_timestamp: Option<Option<String>>,
    #[serde(rename = "reduce_only", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reduce_only: Option<Option<bool>>,
    #[serde(rename = "take_profit_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub take_profit_price: Option<Option<f64>>,
    #[serde(rename = "stop_loss_price", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub stop_loss_price: Option<Option<f64>>,
}

impl Order {
    pub fn new() -> Order {
        Order {
            symbol: None,
            status: None,
            side: None,
            r#type: None,
            price: None,
            exchange_id: None,
            id: None,
            client_order_id: None,
            info: None,
            ledger_id: None,
            asset_a: None,
            asset_b: None,
            timestamp: None,
            datetime: None,
            time_in_force: None,
            post_only: None,
            last_trade_timestamp: None,
            stop_price: None,
            trigger_price: None,
            cost: None,
            amount: None,
            filled: None,
            remaining: None,
            fee: None,
            average: None,
            trades: None,
            fees: None,
            last_update_timestamp: None,
            reduce_only: None,
            take_profit_price: None,
            stop_loss_price: None,
        }
    }
}

