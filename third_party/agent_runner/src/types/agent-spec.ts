/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current portfolio and market state */
        get: operations["getState"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        StateResponse: {
            portfolio?: components["schemas"]["LedgerExchangeAssetMap"];
            prices?: components["schemas"]["LedgerExchangePriceMap"];
            new_orders?: unknown[];
            open_orders?: components["schemas"]["Order"][];
            failed_orders?: unknown[];
            submitted_orders?: unknown[];
            unaffordable_opportunity?: unknown[];
            total_open_orders?: number;
            /** Format: date-time */
            time_since_last_update?: string;
            current_state?: string;
            current_period?: number;
            is_healthy?: boolean;
        };
        /** @description Mapping from ledger → exchange → list of assets */
        LedgerExchangeAssetMap: {
            [key: string]: {
                [key: string]: components["schemas"]["Asset"][];
            };
        };
        /** @description Mapping from ledger → exchange → list of prices */
        LedgerExchangePriceMap: {
            [key: string]: {
                [key: string]: components["schemas"]["Price"][];
            };
        };
        Asset: {
            asset_id?: string;
            free?: number;
            used?: number;
            total?: number;
            is_native?: boolean;
            contract_address?: string | null;
        };
        Price: {
            symbol?: string;
            /**
             * Format: int64
             * @description Unix timestamp in milliseconds
             */
            timestamp?: number;
            /** Format: date-time */
            datetime?: string;
            ask?: number;
            bid?: number;
            asset_a?: string | null;
            asset_b?: string | null;
            bid_volume?: number | null;
            ask_volume?: number | null;
            high?: number;
            low?: number;
            vwap?: number | null;
            open?: number | null;
            close?: number | null;
            last?: number | null;
            previous_close?: number | null;
            change?: number | null;
            percentage?: number | null;
            average?: number | null;
            base_volume?: number | null;
            quote_volume?: number | null;
            info?: Record<string, never> | null;
        };
        Order: {
            symbol?: string;
            status?: number;
            side?: number;
            type?: number;
            price?: number;
            exchange_id?: string;
            id?: string;
            client_order_id?: string | null;
            info?: Record<string, never> | null;
            ledger_id?: string;
            asset_a?: string | null;
            asset_b?: string | null;
            timestamp?: string | null;
            datetime?: string | null;
            time_in_force?: string | null;
            post_only?: boolean | null;
            last_trade_timestamp?: string | null;
            stop_price?: number | null;
            trigger_price?: number | null;
            cost?: number | null;
            amount?: number;
            filled?: number | null;
            remaining?: number | null;
            fee?: number | null;
            average?: number | null;
            trades?: unknown[] | null;
            fees?: unknown[] | null;
            last_update_timestamp?: string | null;
            reduce_only?: boolean | null;
            take_profit_price?: number | null;
            stop_loss_price?: number | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getState: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current state including portfolio, prices, and orders */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StateResponse"];
                };
            };
        };
    };
}
