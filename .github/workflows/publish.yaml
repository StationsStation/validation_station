name: 'publish'

# on:
  # push:
  #   branches:
  #     - release
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  workflow_dispatch:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]


jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            docker_platform: 'linux/arm64,linux/amd64'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            docker_platform: 'linux/arm64,linux/amd64'
          - platform: 'ubuntu-22.04'
            args: ''
            docker_platform: 'linux/amd64'

          - platform: 'windows-latest'
            args: ''
            docker_platform: 'windows/amd64' # adjust based on your image build support


    runs-on: ${{ matrix.platform }}

    defaults:
      run:
        working-directory: ./third_party/agent_runner
    steps:
      - uses: actions/checkout@v4
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      


      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'yarn' # Set this to npm, yarn or pnpm.
          cache-dependency-path: third_party/agent_runner/yarn.lock


      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: yarn install # change this to npm or pnpm depending on which one you use.


      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}


  build-docker:
    # Docker
    env:
      DOCKER_BUILDKIT: 1
      VERSION: ${{ github.event.inputs.version || github.event.release.tag_name || github.event.release.name || github.event.release.body }}
      IMAGE_NAME: yourorg/app

    # Needed
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            docker_platform: 'linux/arm64,linux/amd64'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            docker_platform: 'linux/arm64,linux/amd64'
          - platform: 'ubuntu-22.04'
            args: ''
            docker_platform: 'linux/amd64'

          - platform: 'windows-latest'
            args: ''
            docker_platform: 'windows/amd64' # adjust based on your image build support
    runs-on: ${{ matrix.platform }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build platform specific image using buildx
        run: |
          docker buildx build \
            --platform=${{ matrix.docker_platform }} \
            --tag $IMAGE_NAME:${RELEASE_VERSION}-${{ matrix.docker_platform }} \
            --tag $IMAGE_NAME:latest-${{ matrix.docker_platform }} \
            --load \
            .
        shell: bash